security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check # or api_login_check as defined in config/routes.yaml
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        
        # api_secure:
        #     pattern:   ^/api/secure
        #     stateless: true
        #     

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/backoffice', roles: ROLE_ADMIN }

        - { path: ^/api/users/profile, roles: ROLE_USER }
        - { path: ^/api/users/create, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/users, roles: ROLE_USER } 
        - { path: ^/api/users/[0-9]+/edit, roles: ROLE_USER }
        - { path: ^/api/users/[0-9]+/delete, roles: ROLE_ENSEIGNANT }                
        - { path: ^/api/users/[0-9]+, roles: ROLE_USER }

        - { path: ^/api/groups/create, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/groups, roles: ROLE_USER }
        - { path: ^/api/groups/[0-9]+/edit, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/groups/[0-9]+/add, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/groups/[0-9]+/delete, roles: ROLE_ENSEIGNANT }                
        - { path: ^/api/groups/[0-9]+, roles: ROLE_USER }

        - { path: ^/api/groupexercises, roles: ROLE_USER }
        - { path: ^/api/groupexercises/create, roles: ROLE_ENSEIGNANT }

        - { path: ^/api/exercises/create, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/exercises, roles: ROLE_USER }
        - { path: ^/api/exercises/[0-9]+/edit, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/exercises/[0-9]+/delete, roles: ROLE_ENSEIGNANT }                
        - { path: ^/api/exercises/[0-9]+, roles: ROLE_USER }    

        - { path: ^/api/questions/create, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/questions, roles: ROLE_USER }
        - { path: ^/api/questions/[0-9]+/edit, roles: ROLE_ENSEIGNANT }
        - { path: ^/api/questions/[0-9]+/delete, roles: ROLE_ENSEIGNANT }                
        - { path: ^/api/questions/[0-9]+, roles: ROLE_USER } 

        - { path: ^/api/answers, roles: ROLE_USER }

        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
       

       

    role_hierarchy:
        ROLE_ADMIN: ROLE_ENSEIGNANT
        ROLE_ENSEIGNANT: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
